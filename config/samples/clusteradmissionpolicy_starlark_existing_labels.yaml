apiVersion: admitik.freepik.com/v1alpha1
kind: ClusterAdmissionPolicy
metadata:
  labels:
    app.kubernetes.io/name: admitik
    app.kubernetes.io/managed-by: kustomize
  name: starlark-confirm-existing-namespace-labels
spec:

  failureAction: Enforce

  # Resources to be watched
  watchedResources:
    group: ""
    version: v1
    resource: namespaces
    operations:
      - CREATE
      - UPDATE

  # Other resources to be retrieved for conditions templates.
  # They will be included under .sources scope in the template
  sources: []

  conditions:
    - name: confirm-existing-label

      # The 'engine' field decides between:
      # * gotmpl:   (default) Vitamin Golang templating (well known from Helm)
      # * starlark: Starlark from Google
      engine: starlark

      # The 'key' field is the place to write your template or code
      # The result of this field will be compared with 'value' for equality
      key: |
        # Ref [Specifications]: https://starlark-lang.org/spec.html
        # Ref [Playground]: https://starlark-lang.org/playground.html
        # Ref [Extra Libs]: https://github.com/google/starlark-go/tree/master/lib
        
        # Injected data is located in following global variables:
        # operation, oldObject, object, sources
        
        def isLabelPresent(label):
          labels = object["metadata"].get("labels")
          if labels == None:
            return "labels-not-found"
        
          mostWanted = labels.get(label)
          if mostWanted == None:
            return "label-not-found"        
          return "label-found"
              
        isPresent = isLabelPresent("admitik.freepik.com/label")
        
        # It's possible to throw messages to the logs
        log.printf("Is the label present?: %v\n", isPresent)
        
        # Printing is the way to return the result for comparing to 'value'
        print(isPresent)

      value: "label-found"

  message:
    engine: starlark
    template: |
      print("Resource '{}/{}' was rejected as some required label is missing".format(object["kind"], object["metadata"]["name"]))
