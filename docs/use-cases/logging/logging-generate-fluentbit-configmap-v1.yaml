# logging-generate-fluentbit-configmap-v1 is a policy that generates a fluentbit configmap for deployments,
# daemonsets, statefulsets and cronjobs which have the label admitik.policy.v1/logging set to true and the annotation
# admitik.policy.v1/loggingConfig set to a valid yaml configuration.

# This configmap is used to configure the fluentbit sidecar in the pods and send the logs to a fluentd instance.

apiVersion: admitik.freepik.com/v1alpha1
kind: ClusterMutationPolicy
metadata:
  name: logging-generate-fluentbit-configmap-v1

spec:

  overwriteExisting: true

  watchedResources:
    - group: apps
      version: v1
      resource: deployments
    - group: apps
      version: v1
      resource: daemonsets
    - group: apps
      version: v1
      resource: statefulsets
    - group: batch
      version: v1
      resource: cronjobs
    - group: argoproj.io
      version: v1alpha1
      resource: rollouts

  sources: []

  conditions:

    - name: apply-on-specific-mark
      engine: cel
      key: |              
        (has(object.metadata.labels) &&
        object.metadata.labels.exists(label, label == 'admitik.policy.v1/logging')) ||
        
        (has(object.metadata.annotations) &&
        object.metadata.annotations.exists(label, label == 'admitik.policy.v1/logging')) &&
        
        (has(object.metadata.annotations) &&
        object.metadata.annotations.exists(label, label == 'admitik.policy.v1/loggingConfig'))

      value: "true"

  object:
    clone: {}
    definition:
      engine: starlark
      template: |
        def generate_configmap():
          configmap_data_section = {
            "fluentbit.conf": """
        [SERVICE]
            Flush         1
            Log_Level     info
            Daemon        off

        @INCLUDE /fluent-bit/etc/fluentbit_*.conf
            """
          }

          for entry in yaml.decode(object["metadata"]["annotations"]["admitik.policy.v1/loggingConfig"]):
              namespace = object["metadata"]["namespace"]
              container = entry.get("container")
              parser = entry.get("parser", "json")
              index = entry.get("index")
              ilm = entry.get("ilm_policy_id", "30d")
              ingest_anyways = entry.get("ingest_anyways", "true")
              host = entry.get("host", "fluentd.logging.svc.cluster.local")
              port = entry.get("port", "24224")

              content = """
        [INPUT]
            Name              tail
            Path              /var/log/containers/${{HOSTNAME}}_{}_{}-*.log
            multiline.parser  docker, cri
            Tag               {}.{}
            Mem_Buf_Limit     25MB
            Skip_Long_Lines   On
            Refresh_Interval  5
            db                /fluent-bit/pos/{}.db

        [FILTER]
            Name                record_modifier
            Match               {}.{}
            Record              index "{}"
            Record              pod_name "${{HOSTNAME}}"
            Record              namespace "{}"
            Record              container "{}"
            Record              ilm_policy_id "{}"
            Record              ingest_anyways "{}"

        [OUTPUT]
            Name  forward
            Match {}.{}
            Host  {}
            Port  {}
            Retry_Limit 5""".format(namespace, container, container, parser,
                        container, container, parser, index, namespace,
                        container, ilm, ingest_anyways, container, parser, host, port)

              configmap_data_section["fluentbit_" + container + ".conf"] = content  

          configmap_resource = {
            "apiVersion": "v1",
            "kind": "ConfigMap",
            "metadata": {
              "name": "fluentbit-" + object["metadata"]["name"] + "-autogenerated",
              "namespace": object["metadata"]["namespace"],
              "labels": {
                "managed-by": "admitik",
                "policy-name": "logging-generate-fluentbit-configmap-v1",
                "parent-object-kind": object["kind"],
                "parent-object-name": object["metadata"]["name"]
              },
            },
            "data": configmap_data_section
          }
          return configmap_resource

        print(generate_configmap())